var MainChannel, createMainApp;

import Backbone from 'backbone';

import {
  Region
} from 'backbone.marionette';

import RootApp from './root-app';

import MessagesApp from './tkmessages';

import NavbarApp from './tknavbar';

import RouterApp from './tkrouter';

MainChannel = Backbone.Radio.channel('global');

createMainApp = function(cfg) {
  var layout, mainApp, nbApp, nbview, options, rootEl, rootRegion, useMessages, useNavbar;
  rootEl = (cfg != null ? cfg.appRegion : void 0) || 'body';
  rootRegion = new Region({
    el: rootEl
  });
  mainApp = new RootApp({
    appConfig: cfg,
    region: rootRegion
  });
  mainApp.setState('appConfig', cfg);
  MainChannel.reply('main:app:object', function() {
    return mainApp;
  });
  MainChannel.reply('main:app:config', function() {
    return mainApp.getOption('appConfig');
  });
  layout = mainApp.getView();
  // setup messages
  useMessages = true;
  if ((cfg.useMessages != null) && cfg.useMessages === false) {
    useMessages = false;
  }
  if (useMessages) {
    mainApp.addChildApp('messages', MessagesApp, {
      region: layout.getRegion('messages'),
      appConfig: cfg,
      parentApp: mainApp
    });
  }
  // setup navbar
  useNavbar = true;
  if ((cfg.useNavbar != null) && cfg.useNavbar === false) {
    useNavbar = false;
  }
  if (useNavbar) {
    nbApp = mainApp.addChildApp('navbar', NavbarApp, {
      region: layout.getRegion('navbar'),
      startWithParent: true,
      appConfig: cfg,
      parentApp: mainApp
    });
    if (cfg.hasUser) {
      nbview = nbApp.getView();
      options = {
        region: nbview.getRegion('userEntries'),
        startWithParent: true,
        appConfig: cfg,
        parentApp: nbApp,
        user: MainChannel.request("main:app:decode-auth-token")
      };
      nbApp.addChildApp('user-menu', cfg.userMenuApp, options);
    }
  }
  mainApp.addChildApp('router', RouterApp, {
    startWithParent: true,
    appConfig: cfg,
    parentApp: mainApp
  });
  return mainApp;
};

export default createMainApp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtbWFpbi1hcHAuanMiLCJzb3VyY2VzIjpbInN0YXJ0LW1haW4tYXBwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLFdBQUEsRUFBQTs7QUFBQSxPQUFPLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsTUFBVDtDQUFBLE1BQUE7O0FBRUEsT0FBTyxPQUFQLE1BQUE7O0FBQ0EsT0FBTyxXQUFQLE1BQUE7O0FBQ0EsT0FBTyxTQUFQLE1BQUE7O0FBQ0EsT0FBTyxTQUFQLE1BQUE7O0FBRUEsV0FBQSxHQUFjLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBZixDQUF1QixRQUF2Qjs7QUFFZCxhQUFBLEdBQWdCLFFBQUEsQ0FBQyxHQUFELENBQUE7QUFDaEIsTUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBO0VBQUUsTUFBQSxrQkFBUyxHQUFHLENBQUUsbUJBQUwsSUFBa0I7RUFDM0IsVUFBQSxHQUFhLElBQUksTUFBSixDQUFXO0lBQUEsRUFBQSxFQUFJO0VBQUosQ0FBWDtFQUNiLE9BQUEsR0FBVSxJQUFJLE9BQUosQ0FDUjtJQUFBLFNBQUEsRUFBVyxHQUFYO0lBQ0EsTUFBQSxFQUFRO0VBRFIsQ0FEUTtFQUdWLE9BQU8sQ0FBQyxRQUFSLENBQWlCLFdBQWpCLEVBQThCLEdBQTlCO0VBQ0EsV0FBVyxDQUFDLEtBQVosQ0FBa0IsaUJBQWxCLEVBQXFDLFFBQUEsQ0FBQSxDQUFBO0FBQ25DLFdBQU87RUFENEIsQ0FBckM7RUFFQSxXQUFXLENBQUMsS0FBWixDQUFrQixpQkFBbEIsRUFBcUMsUUFBQSxDQUFBLENBQUE7QUFDbkMsV0FBTyxPQUFPLENBQUMsU0FBUixDQUFrQixXQUFsQjtFQUQ0QixDQUFyQztFQUVBLE1BQUEsR0FBUyxPQUFPLENBQUMsT0FBUixDQUFBLEVBVlg7O0VBWUUsV0FBQSxHQUFjO0VBQ2QsSUFBRyx5QkFBQSxJQUFxQixHQUFHLENBQUMsV0FBSixLQUFtQixLQUEzQztJQUNFLFdBQUEsR0FBYyxNQURoQjs7RUFFQSxJQUFHLFdBQUg7SUFDRSxPQUFPLENBQUMsV0FBUixDQUFvQixVQUFwQixFQUFnQyxXQUFoQyxFQUNFO01BQUEsTUFBQSxFQUFRLE1BQU0sQ0FBQyxTQUFQLENBQWlCLFVBQWpCLENBQVI7TUFDQSxTQUFBLEVBQVcsR0FEWDtNQUVBLFNBQUEsRUFBVztJQUZYLENBREYsRUFERjtHQWZGOztFQXFCRSxTQUFBLEdBQVk7RUFDWixJQUFHLHVCQUFBLElBQW1CLEdBQUcsQ0FBQyxTQUFKLEtBQWlCLEtBQXZDO0lBQ0UsU0FBQSxHQUFZLE1BRGQ7O0VBRUEsSUFBRyxTQUFIO0lBQ0UsS0FBQSxHQUFRLE9BQU8sQ0FBQyxXQUFSLENBQW9CLFFBQXBCLEVBQThCLFNBQTlCLEVBQ047TUFBQSxNQUFBLEVBQVEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsUUFBakIsQ0FBUjtNQUNBLGVBQUEsRUFBaUIsSUFEakI7TUFFQSxTQUFBLEVBQVcsR0FGWDtNQUdBLFNBQUEsRUFBVztJQUhYLENBRE07SUFLUixJQUFHLEdBQUcsQ0FBQyxPQUFQO01BQ0UsTUFBQSxHQUFTLEtBQUssQ0FBQyxPQUFOLENBQUE7TUFDVCxPQUFBLEdBQ0U7UUFBQSxNQUFBLEVBQVEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsYUFBakIsQ0FBUjtRQUNBLGVBQUEsRUFBaUIsSUFEakI7UUFFQSxTQUFBLEVBQVcsR0FGWDtRQUdBLFNBQUEsRUFBVyxLQUhYO1FBSUEsSUFBQSxFQUFNLFdBQVcsQ0FBQyxPQUFaLENBQW9CLDRCQUFwQjtNQUpOO01BS0YsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsV0FBbEIsRUFBK0IsR0FBRyxDQUFDLFdBQW5DLEVBQWdELE9BQWhELEVBUkY7S0FORjs7RUFlQSxPQUFPLENBQUMsV0FBUixDQUFvQixRQUFwQixFQUE4QixTQUE5QixFQUNFO0lBQUEsZUFBQSxFQUFpQixJQUFqQjtJQUNBLFNBQUEsRUFBVyxHQURYO0lBRUEsU0FBQSxFQUFXO0VBRlgsQ0FERjtBQUlBLFNBQU87QUE1Q087O0FBOENoQixPQUFBLFFBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFja2JvbmUgZnJvbSAnYmFja2JvbmUnXG5pbXBvcnQgeyBSZWdpb24gfSBmcm9tICdiYWNrYm9uZS5tYXJpb25ldHRlJ1xuXG5pbXBvcnQgUm9vdEFwcCBmcm9tICcuL3Jvb3QtYXBwJ1xuaW1wb3J0IE1lc3NhZ2VzQXBwIGZyb20gJy4vdGttZXNzYWdlcydcbmltcG9ydCBOYXZiYXJBcHAgZnJvbSAnLi90a25hdmJhcidcbmltcG9ydCBSb3V0ZXJBcHAgZnJvbSAnLi90a3JvdXRlcidcblxuTWFpbkNoYW5uZWwgPSBCYWNrYm9uZS5SYWRpby5jaGFubmVsICdnbG9iYWwnXG5cbmNyZWF0ZU1haW5BcHAgPSAoY2ZnKSAtPlxuICByb290RWwgPSBjZmc/LmFwcFJlZ2lvbiBvciAnYm9keSdcbiAgcm9vdFJlZ2lvbiA9IG5ldyBSZWdpb24gZWw6IHJvb3RFbFxuICBtYWluQXBwID0gbmV3IFJvb3RBcHBcbiAgICBhcHBDb25maWc6IGNmZ1xuICAgIHJlZ2lvbjogcm9vdFJlZ2lvblxuICBtYWluQXBwLnNldFN0YXRlICdhcHBDb25maWcnLCBjZmdcbiAgTWFpbkNoYW5uZWwucmVwbHkgJ21haW46YXBwOm9iamVjdCcsIC0+XG4gICAgcmV0dXJuIG1haW5BcHBcbiAgTWFpbkNoYW5uZWwucmVwbHkgJ21haW46YXBwOmNvbmZpZycsIC0+XG4gICAgcmV0dXJuIG1haW5BcHAuZ2V0T3B0aW9uICdhcHBDb25maWcnXG4gIGxheW91dCA9IG1haW5BcHAuZ2V0VmlldygpXG4gICMgc2V0dXAgbWVzc2FnZXNcbiAgdXNlTWVzc2FnZXMgPSB0cnVlXG4gIGlmIGNmZy51c2VNZXNzYWdlcz8gYW5kIGNmZy51c2VNZXNzYWdlcyBpcyBmYWxzZVxuICAgIHVzZU1lc3NhZ2VzID0gZmFsc2VcbiAgaWYgdXNlTWVzc2FnZXNcbiAgICBtYWluQXBwLmFkZENoaWxkQXBwICdtZXNzYWdlcycsIE1lc3NhZ2VzQXBwLFxuICAgICAgcmVnaW9uOiBsYXlvdXQuZ2V0UmVnaW9uICdtZXNzYWdlcydcbiAgICAgIGFwcENvbmZpZzogY2ZnXG4gICAgICBwYXJlbnRBcHA6IG1haW5BcHBcbiAgIyBzZXR1cCBuYXZiYXJcbiAgdXNlTmF2YmFyID0gdHJ1ZVxuICBpZiBjZmcudXNlTmF2YmFyPyBhbmQgY2ZnLnVzZU5hdmJhciBpcyBmYWxzZVxuICAgIHVzZU5hdmJhciA9IGZhbHNlXG4gIGlmIHVzZU5hdmJhclxuICAgIG5iQXBwID0gbWFpbkFwcC5hZGRDaGlsZEFwcCAnbmF2YmFyJywgTmF2YmFyQXBwLFxuICAgICAgcmVnaW9uOiBsYXlvdXQuZ2V0UmVnaW9uICduYXZiYXInXG4gICAgICBzdGFydFdpdGhQYXJlbnQ6IHRydWVcbiAgICAgIGFwcENvbmZpZzogY2ZnXG4gICAgICBwYXJlbnRBcHA6IG1haW5BcHBcbiAgICBpZiBjZmcuaGFzVXNlclxuICAgICAgbmJ2aWV3ID0gbmJBcHAuZ2V0VmlldygpXG4gICAgICBvcHRpb25zID1cbiAgICAgICAgcmVnaW9uOiBuYnZpZXcuZ2V0UmVnaW9uICd1c2VyRW50cmllcydcbiAgICAgICAgc3RhcnRXaXRoUGFyZW50OiB0cnVlXG4gICAgICAgIGFwcENvbmZpZzogY2ZnXG4gICAgICAgIHBhcmVudEFwcDogbmJBcHBcbiAgICAgICAgdXNlcjogTWFpbkNoYW5uZWwucmVxdWVzdCBcIm1haW46YXBwOmRlY29kZS1hdXRoLXRva2VuXCJcbiAgICAgIG5iQXBwLmFkZENoaWxkQXBwICd1c2VyLW1lbnUnLCBjZmcudXNlck1lbnVBcHAsIG9wdGlvbnNcbiAgbWFpbkFwcC5hZGRDaGlsZEFwcCAncm91dGVyJywgUm91dGVyQXBwLFxuICAgIHN0YXJ0V2l0aFBhcmVudDogdHJ1ZVxuICAgIGFwcENvbmZpZzogY2ZnXG4gICAgcGFyZW50QXBwOiBtYWluQXBwXG4gIHJldHVybiBtYWluQXBwXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1haW5BcHBcblxuICAgIFxuICAgIFxuIl19
