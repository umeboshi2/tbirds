var SimpleFileInput;

import {
  View
} from 'backbone.marionette';

import tc from 'teacup';

SimpleFileInput = (function() {
  class SimpleFileInput extends View {
    templateContext() {
      return {
        parseMsg: this.getOption('parseMsg') || 'Parse file',
        headerMsg: this.getOption('headerMsg') || 'Drop file',
        inputId: this.getOption('inputId') || 'customFile'
      };
    }

    
      // https://stackoverflow.com/a/12102992
    fileInputClicked(event) {
      console.log("file_input_clicked", event);
      this.ui.fileInput.val(null);
      return this.ui.chosenBtn.hide();
    }

    fileInputChanged(event) {
      console.log("file_input_changed", event);
      return this.ui.chosenBtn.show();
    }

    handleDrop(event) {
      var dt, file;
      event.preventDefault();
      this.ui.dropzone.css('border', '0px');
      dt = event.originalEvent.dataTransfer;
      file = dt.files[0];
      this.ui.statusMsg.text(`File: ${file.name}`);
      this.droppedFile = file;
      return this.ui.parseBtn.show();
    }

    handleDragOver(event) {
      event.preventDefault();
      return event.stopPropagation();
    }

    handleDragEnter(event) {
      event.stopPropagation();
      event.preventDefault();
      return this.ui.dropzone.css('border', '2px dotted');
    }

    fileReaderOnLoad() {
      throw {
        msg: "Notimplementederror"
      };
    }

    readFile(file) {
      var reader;
      reader = new FileReader();
      reader.onload = this.fileReaderOnLoad;
      reader.fileObject = file;
      if (this.fileType === 'binary') {
        return reader.readAsBinaryString(file);
      } else {
        return reader.readAsText(file);
      }
    }

    handleChosenFile() {
      var file, filename;
      filename = this.ui.fileInput.val();
      this.ui.statusMsg.text(`Reading chosen file...(${filename})`);
      file = this.ui.fileInput[0].files[0];
      this.ui.parseBtn.hide();
      return this.readFile(file);
    }

    handleDroppedFile() {
      this.ui.statusMsg.text(`Reading dropped file... (${this.droppedFile.name})`);
      this.ui.parseBtn.hide();
      return this.readFile(this.droppedFile);
    }

  };

  SimpleFileInput.prototype.template = tc.renderable(function(model) {
    var noDisplay;
    noDisplay = {
      style: 'display:none'
    };
    return tc.div('.dropzone.card', function() {
      tc.div('.card-header', function() {
        return tc.text(model.headerMsg);
      });
      tc.div('.card-body', function() {
        return tc.div('.parse-btn.btn.btn-primary', noDisplay, function() {
          return tc.text('upload dropped file');
        });
      });
      return tc.div('.card-footer', function() {
        tc.div('.file-input-wrapper', function() {
          tc.input(`#${model.inputId}`, {
            type: 'file'
          });
          return tc.label({
            'for': model.inputId
          }, "Choose File");
        });
        return tc.span('.parse-chosen-btn.btn.btn-primary', noDisplay, function() {
          return tc.text(model.parseMsg);
        });
      });
    });
  });

  SimpleFileInput.prototype.fileType = 'binary';

  SimpleFileInput.prototype.ui = {
    fileInput: '.file-input',
    parseBtn: '.parse-btn',
    chosenBtn: '.parse-chosen-btn',
    dropzone: '.dropzone',
    statusMsg: '.card-header'
  };

  SimpleFileInput.prototype.events = {
    'dragover @ui.dropzone': 'handleDragOver',
    'dragenter @ui.dropzone': 'handleDragEnter',
    'drop @ui.dropzone': 'handleDrop',
    'click @ui.fileInput': 'fileInputClicked',
    'change @ui.fileInput': 'fileInputChanged',
    'click @ui.parseBtn': 'handleDroppedFile',
    'click @ui.chosenBtn': 'handleChosenFile'
  };

  return SimpleFileInput;

}).call(this);

export default SimpleFileInput;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
