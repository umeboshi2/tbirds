var BaseMessage, BaseMessageCollection, MainChannel, MessageChannel, add_message, i, len, level, levels, main_message_collection;

import Backbone from 'backbone';

MainChannel = Backbone.Radio.channel('global');

MessageChannel = Backbone.Radio.channel('messages');

BaseMessage = (function() {
  class BaseMessage extends Backbone.Model {};

  BaseMessage.prototype.defaults = {
    level: 'info'
  };

  return BaseMessage;

}).call(this);

BaseMessageCollection = (function() {
  class BaseMessageCollection extends Backbone.Collection {};

  BaseMessageCollection.prototype.model = BaseMessage;

  return BaseMessageCollection;

}).call(this);

main_message_collection = new BaseMessageCollection;

MessageChannel.reply('messages', function() {
  return main_message_collection;
});

add_message = function(msg, level, icon = false, delay = 6000) {
  var destroy, message;
  message = new BaseMessage({
    content: msg,
    level: level,
    icon: icon
  });
  //# FIXME make delay configurable
  //delay = 6000
  if (level !== 'danger') {
    destroy = function() {
      return main_message_collection.remove(message);
    };
    setTimeout(destroy, delay);
  }
  return main_message_collection.add(message);
};

MessageChannel.reply('display-message', function(msg, lvl = 'info', icon = false) {
  console.warn('icon', icon);
  return add_message(msg, lvl, icon);
});

levels = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark'];

for (i = 0, len = levels.length; i < len; i++) {
  level = levels[i];
  (function(level) {
    return MessageChannel.reply(level, function(msg, icon = false) {
      return add_message(msg, level, icon);
    });
  })(level);
}

MessageChannel.reply('delete-message', function(model) {
  return main_message_collection.remove(model);
});

MessageChannel.reply('xhr-error', function(xhr) {
  return add_message(xhr.responseJSON.message, 'danger');
});

export {
  BaseMessageCollection
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGttZXNzYWdlcy9kYmNoYW5uZWwuanMiLCJzb3VyY2VzIjpbInRrbWVzc2FnZXMvZGJjaGFubmVsLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLFdBQUEsRUFBQSxxQkFBQSxFQUFBLFdBQUEsRUFBQSxjQUFBLEVBQUEsV0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQTs7QUFBQSxPQUFPLFFBQVAsTUFBQTs7QUFFQSxXQUFBLEdBQWMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFFBQXZCOztBQUNkLGNBQUEsR0FBaUIsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFVBQXZCOztBQUVYO0VBQU4sTUFBQSxZQUFBLFFBQTBCLFFBQVEsQ0FBQyxNQUFuQyxDQUFBOzt3QkFDRSxRQUFBLEdBQ0U7SUFBQSxLQUFBLEVBQU87RUFBUDs7Ozs7O0FBRUU7RUFBTixNQUFBLHNCQUFBLFFBQW9DLFFBQVEsQ0FBQyxXQUE3QyxDQUFBOztrQ0FDRSxLQUFBLEdBQU87Ozs7OztBQUVULHVCQUFBLEdBQTBCLElBQUk7O0FBQzlCLGNBQWMsQ0FBQyxLQUFmLENBQXFCLFVBQXJCLEVBQWlDLFFBQUEsQ0FBQSxDQUFBO1NBQy9CO0FBRCtCLENBQWpDOztBQUdBLFdBQUEsR0FBYyxRQUFBLENBQUMsR0FBRCxFQUFNLEtBQU4sRUFBYSxPQUFLLEtBQWxCLEVBQXlCLFFBQU0sSUFBL0IsQ0FBQTtBQUNaLE1BQUEsT0FBQSxFQUFBO0VBQUEsT0FBQSxHQUFVLElBQUksV0FBSixDQUNSO0lBQUEsT0FBQSxFQUFTLEdBQVQ7SUFDQSxLQUFBLEVBQU8sS0FEUDtJQUVBLElBQUEsRUFBTTtFQUZOLENBRFEsRUFBVjs7O0VBTUEsSUFBTyxLQUFBLEtBQVMsUUFBaEI7SUFDRSxPQUFBLEdBQVUsUUFBQSxDQUFBLENBQUE7YUFBRyx1QkFBdUIsQ0FBQyxNQUF4QixDQUErQixPQUEvQjtJQUFIO0lBQ1YsVUFBQSxDQUFXLE9BQVgsRUFBb0IsS0FBcEIsRUFGRjs7U0FHQSx1QkFBdUIsQ0FBQyxHQUF4QixDQUE0QixPQUE1QjtBQVZZOztBQVlkLGNBQWMsQ0FBQyxLQUFmLENBQXFCLGlCQUFyQixFQUF3QyxRQUFBLENBQUMsR0FBRCxFQUFNLE1BQUksTUFBVixFQUFrQixPQUFLLEtBQXZCLENBQUE7RUFDdEMsT0FBTyxDQUFDLElBQVIsQ0FBYSxNQUFiLEVBQXFCLElBQXJCO1NBQ0EsV0FBQSxDQUFZLEdBQVosRUFBaUIsR0FBakIsRUFBc0IsSUFBdEI7QUFGc0MsQ0FBeEM7O0FBSUEsTUFBQSxHQUFTLENBQUUsU0FBRixFQUFhLFdBQWIsRUFBMEIsU0FBMUIsRUFBcUMsTUFBckMsRUFDUCxTQURPLEVBQ0ksUUFESixFQUNjLE9BRGQsRUFDdUIsTUFEdkI7O0FBR1QsS0FBQSx3Q0FBQTs7RUFDSyxDQUFBLFFBQUEsQ0FBQyxLQUFELENBQUE7V0FDRCxjQUFjLENBQUMsS0FBZixDQUFxQixLQUFyQixFQUE0QixRQUFBLENBQUMsR0FBRCxFQUFNLE9BQUssS0FBWCxDQUFBO2FBQzFCLFdBQUEsQ0FBWSxHQUFaLEVBQWlCLEtBQWpCLEVBQXdCLElBQXhCO0lBRDBCLENBQTVCO0VBREMsQ0FBQSxDQUFILENBQUksS0FBSjtBQURGOztBQU1BLGNBQWMsQ0FBQyxLQUFmLENBQXFCLGdCQUFyQixFQUF1QyxRQUFBLENBQUMsS0FBRCxDQUFBO1NBQ3JDLHVCQUF1QixDQUFDLE1BQXhCLENBQStCLEtBQS9CO0FBRHFDLENBQXZDOztBQUdBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLFdBQXJCLEVBQWtDLFFBQUEsQ0FBQyxHQUFELENBQUE7U0FDaEMsV0FBQSxDQUFZLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBN0IsRUFBc0MsUUFBdEM7QUFEZ0MsQ0FBbEM7O0FBSUEsT0FBQTtFQUFRLHFCQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhY2tib25lIGZyb20gJ2JhY2tib25lJ1xuXG5NYWluQ2hhbm5lbCA9IEJhY2tib25lLlJhZGlvLmNoYW5uZWwgJ2dsb2JhbCdcbk1lc3NhZ2VDaGFubmVsID0gQmFja2JvbmUuUmFkaW8uY2hhbm5lbCAnbWVzc2FnZXMnXG5cbmNsYXNzIEJhc2VNZXNzYWdlIGV4dGVuZHMgQmFja2JvbmUuTW9kZWxcbiAgZGVmYXVsdHM6XG4gICAgbGV2ZWw6ICdpbmZvJ1xuICBcbmNsYXNzIEJhc2VNZXNzYWdlQ29sbGVjdGlvbiBleHRlbmRzIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgbW9kZWw6IEJhc2VNZXNzYWdlXG5cbm1haW5fbWVzc2FnZV9jb2xsZWN0aW9uID0gbmV3IEJhc2VNZXNzYWdlQ29sbGVjdGlvblxuTWVzc2FnZUNoYW5uZWwucmVwbHkgJ21lc3NhZ2VzJywgLT5cbiAgbWFpbl9tZXNzYWdlX2NvbGxlY3Rpb25cblxuYWRkX21lc3NhZ2UgPSAobXNnLCBsZXZlbCwgaWNvbj1mYWxzZSwgZGVsYXk9NjAwMCkgLT5cbiAgbWVzc2FnZSA9IG5ldyBCYXNlTWVzc2FnZVxuICAgIGNvbnRlbnQ6IG1zZ1xuICAgIGxldmVsOiBsZXZlbFxuICAgIGljb246IGljb25cbiAgIyMgRklYTUUgbWFrZSBkZWxheSBjb25maWd1cmFibGVcbiAgI2RlbGF5ID0gNjAwMFxuICB1bmxlc3MgbGV2ZWwgaXMgJ2RhbmdlcidcbiAgICBkZXN0cm95ID0gLT4gbWFpbl9tZXNzYWdlX2NvbGxlY3Rpb24ucmVtb3ZlIG1lc3NhZ2VcbiAgICBzZXRUaW1lb3V0IGRlc3Ryb3ksIGRlbGF5XG4gIG1haW5fbWVzc2FnZV9jb2xsZWN0aW9uLmFkZCBtZXNzYWdlXG4gIFxuTWVzc2FnZUNoYW5uZWwucmVwbHkgJ2Rpc3BsYXktbWVzc2FnZScsIChtc2csIGx2bD0naW5mbycsIGljb249ZmFsc2UpIC0+XG4gIGNvbnNvbGUud2FybiAnaWNvbicsIGljb25cbiAgYWRkX21lc3NhZ2UgbXNnLCBsdmwsIGljb25cblxubGV2ZWxzID0gWyAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICdpbmZvJyxcbiAgJ3dhcm5pbmcnLCAnZGFuZ2VyJywgJ2xpZ2h0JywgJ2RhcmsnXVxuXG5mb3IgbGV2ZWwgaW4gbGV2ZWxzXG4gIGRvIChsZXZlbCkgLT5cbiAgICBNZXNzYWdlQ2hhbm5lbC5yZXBseSBsZXZlbCwgKG1zZywgaWNvbj1mYWxzZSkgLT5cbiAgICAgIGFkZF9tZXNzYWdlIG1zZywgbGV2ZWwsIGljb25cbiAgICAgIFxuXG5NZXNzYWdlQ2hhbm5lbC5yZXBseSAnZGVsZXRlLW1lc3NhZ2UnLCAobW9kZWwpIC0+XG4gIG1haW5fbWVzc2FnZV9jb2xsZWN0aW9uLnJlbW92ZSBtb2RlbFxuXG5NZXNzYWdlQ2hhbm5lbC5yZXBseSAneGhyLWVycm9yJywgKHhocikgLT5cbiAgYWRkX21lc3NhZ2UgeGhyLnJlc3BvbnNlSlNPTi5tZXNzYWdlLCAnZGFuZ2VyJ1xuICBcblxuZXhwb3J0IHtCYXNlTWVzc2FnZUNvbGxlY3Rpb259XG5cblxuIl19
