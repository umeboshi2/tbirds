var BaseController, ExtraController, MainChannel, MainController, NavbarChannel;

import $ from 'jquery';

import Backbone from 'backbone';

import Marionette from 'backbone.marionette';

import {
  ToolbarAppletLayout
} from './views/layout';

import navigate_to_url from './util/navigate-to-url';

import scroll_top_fast from './util/scroll-top-fast';

MainChannel = Backbone.Radio.channel('global');

NavbarChannel = Backbone.Radio.channel('navbar');

//class BaseController extends Marionette.Object
BaseController = Marionette.Object.extend({
  init_page: function() {},
  // do nothing
  scrollTop: scroll_top_fast,
  scroll_top: function() {
    console.warn("use scrollTop instead");
    return this.scrollTop(arguments);
  },
  navigateToUrl: navigate_to_url,
  navigate_to_url: function() {
    console.warn("use navigateToUrl instead");
    return this.navigateToUrl(arguments);
  }
});

//class MainController extends BaseController
MainController = BaseController.extend({
  layoutClass: ToolbarAppletLayout,
  _getAppletRegion: function() {
    var app;
    app = MainChannel.request('main:app:object');
    return app.getView().getRegion('applet');
  },
  setupLayout: function() {
    var layoutClass, region;
    layoutClass = this.getOption('layoutClass');
    this.layout = new layoutClass;
    region = this._getAppletRegion();
    if (region.hasView()) {
      region.empty();
    }
    this.applet.setupAppletEntries();
    region.show(this.layout);
  },
  
  // use this method to create a layout only if
  // needed, making routing within the applet
  // more efficient.
  setupLayoutIfNeeded: function() {
    var viewEntries;
    if (this.layout === void 0) {
      this.setupLayout();
    } else if (this.layout.isDestroyed()) {
      this.setupLayout();
    }
    viewEntries = NavbarChannel.request('get-entries', 'view');
    viewEntries.reset();
  },
  setup_layout_if_needed: function() {
    console.warn("use setupLayoutIfNeeded instead");
    this.setupLayoutIfNeeded();
  },
  _get_region: function(region) {
    console.warn("use _getRegion instead");
    return this._getRegion(region);
  },
  _show_view: function(vclass, model) {
    console.warn("use _showView instead");
    return this._showView(vclass, model);
  },
  _load_view: function(vclass, model, objname) {
    console.warn("use _loadView instead");
    return this._loadView(vclass, model, objname);
  },
  _getRegion: function(region) {
    return this.layout.getRegion(region);
  },
  _showView: function(vclass, model) {
    var options, view;
    options = {
      model: model
    };
    if (model instanceof Backbone.Collection) {
      options = {
        collection: model
      };
    }
    view = new vclass(options);
    this.layout.showChildView('content', view);
  },
  _isModelAbsent: function(model) {
    if (model instanceof Backbone.Collection) {
      return model.isEmpty();
    }
    // FIXME
    // presume "id" is only attribute there if length is 1
    return model.isEmpty() || Object.keys(model.attributes).length === 1;
  },
  _loadView: function(vclass, model, objname) {
    var response;
    if (this._isModelAbsent(model)) {
      response = model.fetch();
      response.done(() => {
        this._showView(vclass, model);
      });
      response.fail(function() {
        var msg;
        msg = `Failed to load ${objname} data.`;
        MessageChannel.request('danger', msg);
      });
    } else {
      this._showView(vclass, model);
    }
  }
});


//class ExtraController extends BaseController
ExtraController = BaseController.extend({
  channelName: function() {
    return this.getOption('channelName') || 'global';
  },
  initialize: function(options) {
    this.appletName = options.appletName;
    this.applet = MainChannel.request('main:applet:get-applet', this.appletName);
    this.mainController = this.applet.router.controller;
    this.channel = this.getChannel();
  },
  setup_layout_if_needed: function() {
    this.mainController.setup_layout_if_needed();
  },
  showChildView: function(region, view) {
    this.mainController.layout.showChildView(region, view);
  }
});

export {
  
  //module.exports =
  //  BaseController: BaseController
  //  MainController: MainController
  //  ExtraController: ExtraController
  BaseController,
  MainController,
  ExtraController
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
