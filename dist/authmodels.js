var AuthCollection, AuthModel, AuthRefresh, AuthUnPaginated, Backbone, BasicPageableCollection, MainChannel, MessageChannel, appConfig, auth_sync_options, jwtDecode, makeAuthHeader, navigate_to_url, sendAuthHeader, tokenKeyName,
  indexOf = [].indexOf;

Backbone = require('backbone');

navigate_to_url = require('tbirds/util/navigate-to-url');

jwtDecode = require('jwt-decode');

BasicPageableCollection = require('./basic-pageable-collection');

MainChannel = Backbone.Radio.channel('global');

MessageChannel = Backbone.Radio.channel('messages');

appConfig = MainChannel.request('main:app:config');

tokenKeyName = appConfig.authToken.tokenKeyName || 'auth_token';

// FIXME test for appConfig here and throw error
// if there is not appConfig.
makeAuthHeader = function() {
  var token;
  // retrieve from local storage on each request
  // to ensure current token
  token = localStorage.getItem(tokenKeyName);
  return `${appConfig.authToken.bearerName} ${token}`;
};

sendAuthHeader = function(xhr) {
  return xhr.setRequestHeader(appConfig.authToken.requestHeader, makeAuthHeader());
};

MainChannel.reply('main:app:authBeforeSend', function() {
  return sendAuthHeader;
});

auth_sync_options = function(options) {
  options = options || {};
  options.beforeSend = sendAuthHeader;
  return options;
};

AuthModel = class AuthModel extends Backbone.Model {
  sync(method, model, options) {
    options = auth_sync_options(options);
    return super.sync(method, model, options);
  }

};

AuthCollection = class AuthCollection extends BasicPageableCollection {
  sync(method, model, options) {
    options = auth_sync_options(options);
    return super.sync(method, model, options);
  }

};

AuthUnPaginated = class AuthUnPaginated extends Backbone.Collection {
  sync(method, model, options) {
    options = auth_sync_options(options);
    return super.sync(method, model, options);
  }

  parse(response) {
    return super.parse(response.items);
  }

};

MainChannel.reply('main:app:AuthModel', function() {
  return AuthModel;
});

MainChannel.reply('main:app:AuthCollection', function() {
  return AuthCollection;
});

MainChannel.reply('main:app:AuthUnPaginated', function() {
  return AuthUnPaginated;
});

AuthRefresh = (function() {
  class AuthRefresh extends AuthModel {};

  AuthRefresh.prototype.url = appConfig.authToken.refreshUrl;

  return AuthRefresh;

}).call(this);

MainChannel.reply('main:app:AuthRefresh', function() {
  return AuthRefresh;
});

MainChannel.reply('main:app:set-auth-token', function(token) {
  return localStorage.setItem(tokenKeyName, token);
});

MainChannel.reply('main:app:decode-auth-token', function() {
  var token;
  token = localStorage.getItem(tokenKeyName);
  if (token) {
    return jwtDecode(token);
  } else {
    return {};
  }
});

MainChannel.reply('main:app:refresh-token', function(loginUrl) {
  var refresh, response;
  if (indexOf.call(Object.keys(localStorage), tokenKeyName) < 0) {
    return;
  }
  loginUrl = loginUrl || appConfig.authToken.loginUrl;
  refresh = new AuthRefresh;
  response = refresh.fetch();
  response.fail(function() {
    var msg;
    if (response.status === 401) {
      return window.location.hash = loginUrl;
    } else {
      msg = 'There was a problem refreshing the access token';
      return MessageChannel.request('warning', msg);
    }
  });
  return response.done(function() {
    var decoded, token;
    token = refresh.get('token');
    decoded = jwtDecode(token);
    return localStorage.setItem(tokenKeyName, token);
  });
});

MainChannel.reply('current-user', function() {
  var token;
  if (__DEV__) {
    console.warn("We need to request 'main:app:decode-auth-token' instead");
  }
  token = MainChannel.request('main:app:decode-auth-token');
  if (!token) {
    return null;
  }
  return new Backbone.Model(token);
});

MainChannel.reply('main:app:destroy-auth-token', function() {
  return localStorage.removeItem(tokenKeyName);
});

module.exports = {};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
