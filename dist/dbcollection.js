var DbCollection;

import Backbone from 'backbone';

import {
  MnObject
} from 'backbone.marionette';

DbCollection = class DbCollection extends MnObject {
  initialize(options) {
    var collectionClass;
    collectionClass = options.collectionClass || Backbone.Collection;
    this.collection = new collectionClass;
    return this.channelName = options.channelName || 'global';
  }

  radioRequests() {
    var name, obj, prefix;
    obj = {};
    name = this.getOption('modelName');
    name = name || 'model';
    prefix = `db:${name}`;
    obj[`${prefix}:collection`] = 'getCollection';
    obj[`${prefix}:new`] = 'newModel';
    obj[`${prefix}:add`] = 'addModel';
    obj[`${prefix}:update`] = 'updateModel';
    obj[`${prefix}:updatePassed`] = 'updatePassedModel';
    obj[`${prefix}:get`] = 'getModel';
    obj[`${prefix}:modelClass`] = 'getModelClass';
    obj[`${prefix}:collectionClass`] = 'getCollectionClass';
    return obj;
  }

  getCollection() {
    return this.collection;
  }

  newModel(attributes) {
    var modelClass;
    attributes = attributes || {};
    modelClass = this.getOption('modelClass');
    return new modelClass(attributes);
  }

  addModel(attributes) {
    var channel, model, name;
    attributes = attributes || {};
    channel = this.getChannel();
    name = this.getOption('modelName');
    model = this.collection.create(attributes);
    model.once('sync', function() {
      return channel.trigger(`db:${name}:inserted`);
    });
    this.collection.add(model);
  }

  updatePassedModel(model, newAttributes) {
    var channel, name;
    channel = this.getChannel();
    name = this.getOption('modelName');
    model.once('sync', function() {
      return channel.trigger(`db:${name}:updated`);
    });
    model.set(newAttributes);
    model.save();
  }

  getModel(id) {
    var model;
    model = this.collection.get(id);
    if (model === void 0) {
      return new this.collection.model({
        id: id
      });
    } else {
      return model;
    }
  }

  getModelClass() {
    return this.getOption('modelClass');
  }

  getCollectionClass() {
    return this.getOption('collectionClass');
  }

};

export default DbCollection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJjb2xsZWN0aW9uLmpzIiwic291cmNlcyI6WyJkYmNvbGxlY3Rpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsT0FBTyxRQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFFBQVQ7Q0FBQSxNQUFBOztBQUVNLGVBQU4sTUFBQSxhQUFBLFFBQTJCLFNBQTNCO0VBQ0UsVUFBWSxDQUFDLE9BQUQsQ0FBQTtBQUNWLFFBQUE7SUFBQSxlQUFBLEdBQWtCLE9BQU8sQ0FBQyxlQUFSLElBQTJCLFFBQVEsQ0FBQztJQUN0RCxJQUFDLENBQUEsVUFBRCxHQUFjLElBQUk7V0FDbEIsSUFBQyxDQUFBLFdBQUQsR0FBZSxPQUFPLENBQUMsV0FBUixJQUF1QjtFQUg1Qjs7RUFJWixhQUFlLENBQUEsQ0FBQTtBQUNiLFFBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLEdBQUEsR0FBTSxDQUFBO0lBQ04sSUFBQSxHQUFPLElBQUMsQ0FBQSxTQUFELENBQVcsV0FBWDtJQUNQLElBQUEsR0FBTyxJQUFBLElBQVE7SUFDZixNQUFBLEdBQVMsQ0FBQSxHQUFBLENBQUEsQ0FBTSxJQUFOLENBQUE7SUFDVCxHQUFJLENBQUEsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFVLFdBQVYsQ0FBQSxDQUFKLEdBQThCO0lBQzlCLEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsSUFBVixDQUFBLENBQUosR0FBdUI7SUFDdkIsR0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBVSxJQUFWLENBQUEsQ0FBSixHQUF1QjtJQUN2QixHQUFJLENBQUEsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFVLE9BQVYsQ0FBQSxDQUFKLEdBQTBCO0lBQzFCLEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsYUFBVixDQUFBLENBQUosR0FBZ0M7SUFDaEMsR0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBVSxJQUFWLENBQUEsQ0FBSixHQUF1QjtJQUN2QixHQUFJLENBQUEsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFVLFdBQVYsQ0FBQSxDQUFKLEdBQThCO0lBQzlCLEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsZ0JBQVYsQ0FBQSxDQUFKLEdBQW1DO0FBQ25DLFdBQU87RUFiTTs7RUFjZixhQUFlLENBQUEsQ0FBQTtBQUNiLFdBQU8sSUFBQyxDQUFBO0VBREs7O0VBRWYsUUFBVSxDQUFDLFVBQUQsQ0FBQTtBQUNSLFFBQUE7SUFBQSxVQUFBLEdBQWEsVUFBQSxJQUFjLENBQUE7SUFDM0IsVUFBQSxHQUFhLElBQUMsQ0FBQSxTQUFELENBQVcsWUFBWDtBQUNiLFdBQU8sSUFBSSxVQUFKLENBQWUsVUFBZjtFQUhDOztFQUlWLFFBQVUsQ0FBQyxVQUFELENBQUE7QUFDUixRQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7SUFBQSxVQUFBLEdBQWEsVUFBQSxJQUFjLENBQUE7SUFDM0IsT0FBQSxHQUFVLElBQUMsQ0FBQSxVQUFELENBQUE7SUFDVixJQUFBLEdBQU8sSUFBQyxDQUFBLFNBQUQsQ0FBVyxXQUFYO0lBQ1AsS0FBQSxHQUFRLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBWixDQUFtQixVQUFuQjtJQUNSLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWCxFQUFtQixRQUFBLENBQUEsQ0FBQTthQUNqQixPQUFPLENBQUMsT0FBUixDQUFnQixDQUFBLEdBQUEsQ0FBQSxDQUFNLElBQU4sQ0FBVyxTQUFYLENBQWhCO0lBRGlCLENBQW5CO0lBRUEsSUFBQyxDQUFBLFVBQVUsQ0FBQyxHQUFaLENBQWdCLEtBQWhCO0VBUFE7O0VBU1YsaUJBQW1CLENBQUMsS0FBRCxFQUFRLGFBQVIsQ0FBQTtBQUNqQixRQUFBLE9BQUEsRUFBQTtJQUFBLE9BQUEsR0FBVSxJQUFDLENBQUEsVUFBRCxDQUFBO0lBQ1YsSUFBQSxHQUFPLElBQUMsQ0FBQSxTQUFELENBQVcsV0FBWDtJQUNQLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWCxFQUFtQixRQUFBLENBQUEsQ0FBQTthQUNqQixPQUFPLENBQUMsT0FBUixDQUFnQixDQUFBLEdBQUEsQ0FBQSxDQUFNLElBQU4sQ0FBVyxRQUFYLENBQWhCO0lBRGlCLENBQW5CO0lBRUEsS0FBSyxDQUFDLEdBQU4sQ0FBVSxhQUFWO0lBQ0EsS0FBSyxDQUFDLElBQU4sQ0FBQTtFQU5pQjs7RUFRbkIsUUFBVSxDQUFDLEVBQUQsQ0FBQTtBQUNSLFFBQUE7SUFBQSxLQUFBLEdBQVEsSUFBQyxDQUFBLFVBQVUsQ0FBQyxHQUFaLENBQWdCLEVBQWhCO0lBQ1IsSUFBRyxLQUFBLEtBQVMsTUFBWjtBQUNFLGFBQU8sSUFBSSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQWhCLENBQ0w7UUFBQSxFQUFBLEVBQUk7TUFBSixDQURLLEVBRFQ7S0FBQSxNQUFBO0FBSUUsYUFBTyxNQUpUOztFQUZROztFQU9WLGFBQWUsQ0FBQSxDQUFBO0FBQ2IsV0FBTyxJQUFDLENBQUEsU0FBRCxDQUFXLFlBQVg7RUFETTs7RUFFZixrQkFBb0IsQ0FBQSxDQUFBO0FBQ2xCLFdBQU8sSUFBQyxDQUFBLFNBQUQsQ0FBVyxpQkFBWDtFQURXOztBQW5EdEI7O0FBc0RBLE9BQUEsUUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYWNrYm9uZSBmcm9tICdiYWNrYm9uZSdcbmltcG9ydCB7IE1uT2JqZWN0IH0gZnJvbSAnYmFja2JvbmUubWFyaW9uZXR0ZSdcblxuY2xhc3MgRGJDb2xsZWN0aW9uIGV4dGVuZHMgTW5PYmplY3RcbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgY29sbGVjdGlvbkNsYXNzID0gb3B0aW9ucy5jb2xsZWN0aW9uQ2xhc3Mgb3IgQmFja2JvbmUuQ29sbGVjdGlvblxuICAgIEBjb2xsZWN0aW9uID0gbmV3IGNvbGxlY3Rpb25DbGFzc1xuICAgIEBjaGFubmVsTmFtZSA9IG9wdGlvbnMuY2hhbm5lbE5hbWUgb3IgJ2dsb2JhbCdcbiAgcmFkaW9SZXF1ZXN0czogLT5cbiAgICBvYmogPSB7fVxuICAgIG5hbWUgPSBAZ2V0T3B0aW9uICdtb2RlbE5hbWUnXG4gICAgbmFtZSA9IG5hbWUgb3IgJ21vZGVsJ1xuICAgIHByZWZpeCA9IFwiZGI6I3tuYW1lfVwiXG4gICAgb2JqW1wiI3twcmVmaXh9OmNvbGxlY3Rpb25cIl0gPSAnZ2V0Q29sbGVjdGlvbidcbiAgICBvYmpbXCIje3ByZWZpeH06bmV3XCJdID0gJ25ld01vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTphZGRcIl0gPSAnYWRkTW9kZWwnXG4gICAgb2JqW1wiI3twcmVmaXh9OnVwZGF0ZVwiXSA9ICd1cGRhdGVNb2RlbCdcbiAgICBvYmpbXCIje3ByZWZpeH06dXBkYXRlUGFzc2VkXCJdID0gJ3VwZGF0ZVBhc3NlZE1vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTpnZXRcIl0gPSAnZ2V0TW9kZWwnXG4gICAgb2JqW1wiI3twcmVmaXh9Om1vZGVsQ2xhc3NcIl0gPSAnZ2V0TW9kZWxDbGFzcydcbiAgICBvYmpbXCIje3ByZWZpeH06Y29sbGVjdGlvbkNsYXNzXCJdID0gJ2dldENvbGxlY3Rpb25DbGFzcydcbiAgICByZXR1cm4gb2JqXG4gIGdldENvbGxlY3Rpb246IC0+XG4gICAgcmV0dXJuIEBjb2xsZWN0aW9uXG4gIG5ld01vZGVsOiAoYXR0cmlidXRlcykgLT5cbiAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcyBvciB7fVxuICAgIG1vZGVsQ2xhc3MgPSBAZ2V0T3B0aW9uICdtb2RlbENsYXNzJ1xuICAgIHJldHVybiBuZXcgbW9kZWxDbGFzcyBhdHRyaWJ1dGVzXG4gIGFkZE1vZGVsOiAoYXR0cmlidXRlcykgLT5cbiAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcyBvciB7fVxuICAgIGNoYW5uZWwgPSBAZ2V0Q2hhbm5lbCgpXG4gICAgbmFtZSA9IEBnZXRPcHRpb24gJ21vZGVsTmFtZSdcbiAgICBtb2RlbCA9IEBjb2xsZWN0aW9uLmNyZWF0ZSBhdHRyaWJ1dGVzXG4gICAgbW9kZWwub25jZSAnc3luYycsIC0+XG4gICAgICBjaGFubmVsLnRyaWdnZXIgXCJkYjoje25hbWV9Omluc2VydGVkXCJcbiAgICBAY29sbGVjdGlvbi5hZGQgbW9kZWxcbiAgICByZXR1cm5cbiAgdXBkYXRlUGFzc2VkTW9kZWw6IChtb2RlbCwgbmV3QXR0cmlidXRlcykgLT5cbiAgICBjaGFubmVsID0gQGdldENoYW5uZWwoKVxuICAgIG5hbWUgPSBAZ2V0T3B0aW9uICdtb2RlbE5hbWUnXG4gICAgbW9kZWwub25jZSAnc3luYycsIC0+XG4gICAgICBjaGFubmVsLnRyaWdnZXIgXCJkYjoje25hbWV9OnVwZGF0ZWRcIlxuICAgIG1vZGVsLnNldCBuZXdBdHRyaWJ1dGVzXG4gICAgbW9kZWwuc2F2ZSgpXG4gICAgcmV0dXJuXG4gIGdldE1vZGVsOiAoaWQpIC0+XG4gICAgbW9kZWwgPSBAY29sbGVjdGlvbi5nZXQgaWRcbiAgICBpZiBtb2RlbCBpcyB1bmRlZmluZWRcbiAgICAgIHJldHVybiBuZXcgQGNvbGxlY3Rpb24ubW9kZWxcbiAgICAgICAgaWQ6IGlkXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIG1vZGVsXG4gIGdldE1vZGVsQ2xhc3M6IC0+XG4gICAgcmV0dXJuIEBnZXRPcHRpb24gJ21vZGVsQ2xhc3MnXG4gIGdldENvbGxlY3Rpb25DbGFzczogLT5cbiAgICByZXR1cm4gQGdldE9wdGlvbiAnY29sbGVjdGlvbkNsYXNzJ1xuXG5leHBvcnQgZGVmYXVsdCBEYkNvbGxlY3Rpb25cbiJdfQ==
