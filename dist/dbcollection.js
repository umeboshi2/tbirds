var DbCollection;

import Backbone from 'backbone';

import {
  MnObject
} from 'backbone.marionette';

DbCollection = class DbCollection extends MnObject {
  initialize(options) {
    var collectionClass;
    collectionClass = options.collectionClass || Backbone.Collection;
    this.collection = new collectionClass();
    return this.channelName = options.channelName || 'global';
  }

  radioRequests() {
    var name, obj, prefix;
    obj = {};
    name = this.getOption('modelName');
    name = name || 'model';
    prefix = `db:${name}`;
    obj[`${prefix}:collection`] = 'getCollection';
    obj[`${prefix}:new`] = 'newModel';
    obj[`${prefix}:add`] = 'addModel';
    obj[`${prefix}:update`] = 'updateModel';
    obj[`${prefix}:updatePassed`] = 'updatePassedModel';
    obj[`${prefix}:get`] = 'getModel';
    obj[`${prefix}:modelClass`] = 'getModelClass';
    obj[`${prefix}:collectionClass`] = 'getCollectionClass';
    return obj;
  }

  getCollection() {
    return this.collection;
  }

  newModel(attributes) {
    var modelClass;
    attributes = attributes || {};
    modelClass = this.getOption('modelClass');
    return new modelClass(attributes);
  }

  addModel(attributes) {
    var channel, model, name;
    attributes = attributes || {};
    channel = this.getChannel();
    name = this.getOption('modelName');
    model = this.collection.create(attributes);
    model.once('sync', function() {
      return channel.trigger(`db:${name}:inserted`);
    });
    this.collection.add(model);
  }

  updatePassedModel(model, newAttributes) {
    var channel, name;
    channel = this.getChannel();
    name = this.getOption('modelName');
    model.once('sync', function() {
      return channel.trigger(`db:${name}:updated`);
    });
    model.set(newAttributes);
    model.save();
  }

  getModel(id) {
    var model;
    model = this.collection.get(id);
    if (model === void 0) {
      return new this.collection.model({
        id: id
      });
    } else {
      return model;
    }
  }

  getModelClass() {
    return this.getOption('modelClass');
  }

  getCollectionClass() {
    return this.getOption('collectionClass');
  }

};

export default DbCollection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJjb2xsZWN0aW9uLmpzIiwic291cmNlcyI6WyJkYmNvbGxlY3Rpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsT0FBTyxRQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFFBQVQ7Q0FBQSxNQUFBOztBQUVNLGVBQU4sTUFBQSxhQUFBLFFBQTJCLFNBQTNCO0VBQ0UsVUFBWSxDQUFDLE9BQUQsQ0FBQTtBQUNkLFFBQUE7SUFBSSxlQUFBLEdBQWtCLE9BQU8sQ0FBQyxlQUFSLElBQTJCLFFBQVEsQ0FBQztJQUN0RCxJQUFDLENBQUEsVUFBRCxHQUFjLElBQUksZUFBSixDQUFBO1dBQ2QsSUFBQyxDQUFBLFdBQUQsR0FBZSxPQUFPLENBQUMsV0FBUixJQUF1QjtFQUg1Qjs7RUFJWixhQUFlLENBQUEsQ0FBQTtBQUNqQixRQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7SUFBSSxHQUFBLEdBQU0sQ0FBQTtJQUNOLElBQUEsR0FBTyxJQUFDLENBQUEsU0FBRCxDQUFXLFdBQVg7SUFDUCxJQUFBLEdBQU8sSUFBQSxJQUFRO0lBQ2YsTUFBQSxHQUFTLENBQUEsR0FBQSxDQUFBLENBQU0sSUFBTixDQUFBO0lBQ1QsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBQSxXQUFBLENBQUQsQ0FBSCxHQUE4QjtJQUM5QixHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFBLElBQUEsQ0FBRCxDQUFILEdBQXVCO0lBQ3ZCLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBRyxNQUFILENBQUEsSUFBQSxDQUFELENBQUgsR0FBdUI7SUFDdkIsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBQSxPQUFBLENBQUQsQ0FBSCxHQUEwQjtJQUMxQixHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFBLGFBQUEsQ0FBRCxDQUFILEdBQWdDO0lBQ2hDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBRyxNQUFILENBQUEsSUFBQSxDQUFELENBQUgsR0FBdUI7SUFDdkIsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBQSxXQUFBLENBQUQsQ0FBSCxHQUE4QjtJQUM5QixHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFBLGdCQUFBLENBQUQsQ0FBSCxHQUFtQztBQUNuQyxXQUFPO0VBYk07O0VBY2YsYUFBZSxDQUFBLENBQUE7QUFDYixXQUFPLElBQUMsQ0FBQTtFQURLOztFQUVmLFFBQVUsQ0FBQyxVQUFELENBQUE7QUFDWixRQUFBO0lBQUksVUFBQSxHQUFhLFVBQUEsSUFBYyxDQUFBO0lBQzNCLFVBQUEsR0FBYSxJQUFDLENBQUEsU0FBRCxDQUFXLFlBQVg7QUFDYixXQUFPLElBQUksVUFBSixDQUFlLFVBQWY7RUFIQzs7RUFJVixRQUFVLENBQUMsVUFBRCxDQUFBO0FBQ1osUUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBO0lBQUksVUFBQSxHQUFhLFVBQUEsSUFBYyxDQUFBO0lBQzNCLE9BQUEsR0FBVSxJQUFDLENBQUEsVUFBRCxDQUFBO0lBQ1YsSUFBQSxHQUFPLElBQUMsQ0FBQSxTQUFELENBQVcsV0FBWDtJQUNQLEtBQUEsR0FBUSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosQ0FBbUIsVUFBbkI7SUFDUixLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsRUFBbUIsUUFBQSxDQUFBLENBQUE7YUFDakIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxHQUFBLENBQUEsQ0FBTSxJQUFOLENBQUEsU0FBQSxDQUFoQjtJQURpQixDQUFuQjtJQUVBLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixDQUFnQixLQUFoQjtFQVBROztFQVNWLGlCQUFtQixDQUFDLEtBQUQsRUFBUSxhQUFSLENBQUE7QUFDckIsUUFBQSxPQUFBLEVBQUE7SUFBSSxPQUFBLEdBQVUsSUFBQyxDQUFBLFVBQUQsQ0FBQTtJQUNWLElBQUEsR0FBTyxJQUFDLENBQUEsU0FBRCxDQUFXLFdBQVg7SUFDUCxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsRUFBbUIsUUFBQSxDQUFBLENBQUE7YUFDakIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxHQUFBLENBQUEsQ0FBTSxJQUFOLENBQUEsUUFBQSxDQUFoQjtJQURpQixDQUFuQjtJQUVBLEtBQUssQ0FBQyxHQUFOLENBQVUsYUFBVjtJQUNBLEtBQUssQ0FBQyxJQUFOLENBQUE7RUFOaUI7O0VBUW5CLFFBQVUsQ0FBQyxFQUFELENBQUE7QUFDWixRQUFBO0lBQUksS0FBQSxHQUFRLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixDQUFnQixFQUFoQjtJQUNSLElBQUcsS0FBQSxLQUFTLE1BQVo7QUFDRSxhQUFPLElBQUksSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFoQixDQUNMO1FBQUEsRUFBQSxFQUFJO01BQUosQ0FESyxFQURUO0tBQUEsTUFBQTtBQUlFLGFBQU8sTUFKVDs7RUFGUTs7RUFPVixhQUFlLENBQUEsQ0FBQTtBQUNiLFdBQU8sSUFBQyxDQUFBLFNBQUQsQ0FBVyxZQUFYO0VBRE07O0VBRWYsa0JBQW9CLENBQUEsQ0FBQTtBQUNsQixXQUFPLElBQUMsQ0FBQSxTQUFELENBQVcsaUJBQVg7RUFEVzs7QUFuRHRCOztBQXNEQSxPQUFBLFFBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFja2JvbmUgZnJvbSAnYmFja2JvbmUnXG5pbXBvcnQgeyBNbk9iamVjdCB9IGZyb20gJ2JhY2tib25lLm1hcmlvbmV0dGUnXG5cbmNsYXNzIERiQ29sbGVjdGlvbiBleHRlbmRzIE1uT2JqZWN0XG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIGNvbGxlY3Rpb25DbGFzcyA9IG9wdGlvbnMuY29sbGVjdGlvbkNsYXNzIG9yIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgICBAY29sbGVjdGlvbiA9IG5ldyBjb2xsZWN0aW9uQ2xhc3NcbiAgICBAY2hhbm5lbE5hbWUgPSBvcHRpb25zLmNoYW5uZWxOYW1lIG9yICdnbG9iYWwnXG4gIHJhZGlvUmVxdWVzdHM6IC0+XG4gICAgb2JqID0ge31cbiAgICBuYW1lID0gQGdldE9wdGlvbiAnbW9kZWxOYW1lJ1xuICAgIG5hbWUgPSBuYW1lIG9yICdtb2RlbCdcbiAgICBwcmVmaXggPSBcImRiOiN7bmFtZX1cIlxuICAgIG9ialtcIiN7cHJlZml4fTpjb2xsZWN0aW9uXCJdID0gJ2dldENvbGxlY3Rpb24nXG4gICAgb2JqW1wiI3twcmVmaXh9Om5ld1wiXSA9ICduZXdNb2RlbCdcbiAgICBvYmpbXCIje3ByZWZpeH06YWRkXCJdID0gJ2FkZE1vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTp1cGRhdGVcIl0gPSAndXBkYXRlTW9kZWwnXG4gICAgb2JqW1wiI3twcmVmaXh9OnVwZGF0ZVBhc3NlZFwiXSA9ICd1cGRhdGVQYXNzZWRNb2RlbCdcbiAgICBvYmpbXCIje3ByZWZpeH06Z2V0XCJdID0gJ2dldE1vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTptb2RlbENsYXNzXCJdID0gJ2dldE1vZGVsQ2xhc3MnXG4gICAgb2JqW1wiI3twcmVmaXh9OmNvbGxlY3Rpb25DbGFzc1wiXSA9ICdnZXRDb2xsZWN0aW9uQ2xhc3MnXG4gICAgcmV0dXJuIG9ialxuICBnZXRDb2xsZWN0aW9uOiAtPlxuICAgIHJldHVybiBAY29sbGVjdGlvblxuICBuZXdNb2RlbDogKGF0dHJpYnV0ZXMpIC0+XG4gICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgb3Ige31cbiAgICBtb2RlbENsYXNzID0gQGdldE9wdGlvbiAnbW9kZWxDbGFzcydcbiAgICByZXR1cm4gbmV3IG1vZGVsQ2xhc3MgYXR0cmlidXRlc1xuICBhZGRNb2RlbDogKGF0dHJpYnV0ZXMpIC0+XG4gICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgb3Ige31cbiAgICBjaGFubmVsID0gQGdldENoYW5uZWwoKVxuICAgIG5hbWUgPSBAZ2V0T3B0aW9uICdtb2RlbE5hbWUnXG4gICAgbW9kZWwgPSBAY29sbGVjdGlvbi5jcmVhdGUgYXR0cmlidXRlc1xuICAgIG1vZGVsLm9uY2UgJ3N5bmMnLCAtPlxuICAgICAgY2hhbm5lbC50cmlnZ2VyIFwiZGI6I3tuYW1lfTppbnNlcnRlZFwiXG4gICAgQGNvbGxlY3Rpb24uYWRkIG1vZGVsXG4gICAgcmV0dXJuXG4gIHVwZGF0ZVBhc3NlZE1vZGVsOiAobW9kZWwsIG5ld0F0dHJpYnV0ZXMpIC0+XG4gICAgY2hhbm5lbCA9IEBnZXRDaGFubmVsKClcbiAgICBuYW1lID0gQGdldE9wdGlvbiAnbW9kZWxOYW1lJ1xuICAgIG1vZGVsLm9uY2UgJ3N5bmMnLCAtPlxuICAgICAgY2hhbm5lbC50cmlnZ2VyIFwiZGI6I3tuYW1lfTp1cGRhdGVkXCJcbiAgICBtb2RlbC5zZXQgbmV3QXR0cmlidXRlc1xuICAgIG1vZGVsLnNhdmUoKVxuICAgIHJldHVyblxuICBnZXRNb2RlbDogKGlkKSAtPlxuICAgIG1vZGVsID0gQGNvbGxlY3Rpb24uZ2V0IGlkXG4gICAgaWYgbW9kZWwgaXMgdW5kZWZpbmVkXG4gICAgICByZXR1cm4gbmV3IEBjb2xsZWN0aW9uLm1vZGVsXG4gICAgICAgIGlkOiBpZFxuICAgIGVsc2VcbiAgICAgIHJldHVybiBtb2RlbFxuICBnZXRNb2RlbENsYXNzOiAtPlxuICAgIHJldHVybiBAZ2V0T3B0aW9uICdtb2RlbENsYXNzJ1xuICBnZXRDb2xsZWN0aW9uQ2xhc3M6IC0+XG4gICAgcmV0dXJuIEBnZXRPcHRpb24gJ2NvbGxlY3Rpb25DbGFzcydcblxuZXhwb3J0IGRlZmF1bHQgRGJDb2xsZWN0aW9uXG4iXX0=
