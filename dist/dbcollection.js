var Backbone, DbCollection, Marionette;

Backbone = require('backbone');

Marionette = require('backbone.marionette');

DbCollection = class DbCollection extends Marionette.Object {
  initialize(options) {
    var collectionClass;
    collectionClass = options.collectionClass || Backbone.Collection;
    this.collection = new collectionClass;
    return this.channelName = options.channelName || 'global';
  }

  radioRequests() {
    var name, obj, prefix;
    obj = {};
    name = this.getOption('modelName');
    name = name || 'model';
    prefix = `db:${name}`;
    obj[`${prefix}:collection`] = 'getCollection';
    obj[`${prefix}:new`] = 'newModel';
    obj[`${prefix}:add`] = 'addModel';
    obj[`${prefix}:update`] = 'updateModel';
    obj[`${prefix}:updatePassed`] = 'updatePassedModel';
    obj[`${prefix}:get`] = 'getModel';
    obj[`${prefix}:modelClass`] = 'getModelClass';
    obj[`${prefix}:collectionClass`] = 'getCollectionClass';
    return obj;
  }

  getCollection() {
    return this.collection;
  }

  newModel(attributes) {
    var modelClass;
    attributes = attributes || {};
    modelClass = this.getOption('modelClass');
    return new modelClass(attributes);
  }

  addModel(attributes) {
    var channel, model, name;
    attributes = attributes || {};
    channel = this.getChannel();
    name = this.getOption('modelName');
    model = this.collection.create(attributes);
    model.once('sync', function() {
      return channel.trigger(`db:${name}:inserted`);
    });
    return this.collection.add(model);
  }

  updatePassedModel(model, newAttributes) {
    var channel, name;
    channel = this.getChannel();
    name = this.getOption('modelName');
    model.once('sync', function() {
      return channel.trigger(`db:${name}:updated`);
    });
    model.set(newAttributes);
    return model.save();
  }

  getModel(id) {
    var model;
    model = this.collection.get(id);
    if (model === void 0) {
      return new this.collection.model({
        id: id
      });
    } else {
      return model;
    }
  }

  getModelClass() {
    return this.getOption('modelClass');
  }

  getCollectionClass() {
    return this.getOption('collectionClass');
  }

};

module.exports = DbCollection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJjb2xsZWN0aW9uLmpzIiwic291cmNlcyI6WyJkYmNvbGxlY3Rpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQTs7QUFBQSxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBQ1gsVUFBQSxHQUFhLE9BQUEsQ0FBUSxxQkFBUjs7QUFFUCxlQUFOLE1BQUEsYUFBQSxRQUEyQixVQUFVLENBQUMsT0FBdEM7RUFDRSxVQUFZLENBQUMsT0FBRCxDQUFBO0FBQ1YsUUFBQTtJQUFBLGVBQUEsR0FBa0IsT0FBTyxDQUFDLGVBQVIsSUFBMkIsUUFBUSxDQUFDO0lBQ3RELElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBSTtXQUNsQixJQUFDLENBQUEsV0FBRCxHQUFlLE9BQU8sQ0FBQyxXQUFSLElBQXVCO0VBSDVCOztFQUlaLGFBQWUsQ0FBQSxDQUFBO0FBQ2IsUUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBO0lBQUEsR0FBQSxHQUFNLENBQUE7SUFDTixJQUFBLEdBQU8sSUFBQyxDQUFBLFNBQUQsQ0FBVyxXQUFYO0lBQ1AsSUFBQSxHQUFPLElBQUEsSUFBUTtJQUNmLE1BQUEsR0FBUyxDQUFBLEdBQUEsQ0FBQSxDQUFNLElBQU4sQ0FBQTtJQUNULEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsV0FBVixDQUFBLENBQUosR0FBOEI7SUFDOUIsR0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBVSxJQUFWLENBQUEsQ0FBSixHQUF1QjtJQUN2QixHQUFJLENBQUEsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFVLElBQVYsQ0FBQSxDQUFKLEdBQXVCO0lBQ3ZCLEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsT0FBVixDQUFBLENBQUosR0FBMEI7SUFDMUIsR0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBVSxhQUFWLENBQUEsQ0FBSixHQUFnQztJQUNoQyxHQUFJLENBQUEsQ0FBQSxDQUFBLENBQUcsTUFBSCxDQUFVLElBQVYsQ0FBQSxDQUFKLEdBQXVCO0lBQ3ZCLEdBQUksQ0FBQSxDQUFBLENBQUEsQ0FBRyxNQUFILENBQVUsV0FBVixDQUFBLENBQUosR0FBOEI7SUFDOUIsR0FBSSxDQUFBLENBQUEsQ0FBQSxDQUFHLE1BQUgsQ0FBVSxnQkFBVixDQUFBLENBQUosR0FBbUM7QUFDbkMsV0FBTztFQWJNOztFQWNmLGFBQWUsQ0FBQSxDQUFBO1dBQ2IsSUFBQyxDQUFBO0VBRFk7O0VBRWYsUUFBVSxDQUFDLFVBQUQsQ0FBQTtBQUNSLFFBQUE7SUFBQSxVQUFBLEdBQWEsVUFBQSxJQUFjLENBQUE7SUFDM0IsVUFBQSxHQUFhLElBQUMsQ0FBQSxTQUFELENBQVcsWUFBWDtXQUNiLElBQUksVUFBSixDQUFlLFVBQWY7RUFIUTs7RUFJVixRQUFVLENBQUMsVUFBRCxDQUFBO0FBQ1IsUUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBO0lBQUEsVUFBQSxHQUFhLFVBQUEsSUFBYyxDQUFBO0lBQzNCLE9BQUEsR0FBVSxJQUFDLENBQUEsVUFBRCxDQUFBO0lBQ1YsSUFBQSxHQUFPLElBQUMsQ0FBQSxTQUFELENBQVcsV0FBWDtJQUNQLEtBQUEsR0FBUSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosQ0FBbUIsVUFBbkI7SUFDUixLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsRUFBbUIsUUFBQSxDQUFBLENBQUE7YUFDakIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxHQUFBLENBQUEsQ0FBTSxJQUFOLENBQVcsU0FBWCxDQUFoQjtJQURpQixDQUFuQjtXQUVBLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixDQUFnQixLQUFoQjtFQVBROztFQVFWLGlCQUFtQixDQUFDLEtBQUQsRUFBUSxhQUFSLENBQUE7QUFDakIsUUFBQSxPQUFBLEVBQUE7SUFBQSxPQUFBLEdBQVUsSUFBQyxDQUFBLFVBQUQsQ0FBQTtJQUNWLElBQUEsR0FBTyxJQUFDLENBQUEsU0FBRCxDQUFXLFdBQVg7SUFDUCxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsRUFBbUIsUUFBQSxDQUFBLENBQUE7YUFDakIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxHQUFBLENBQUEsQ0FBTSxJQUFOLENBQVcsUUFBWCxDQUFoQjtJQURpQixDQUFuQjtJQUVBLEtBQUssQ0FBQyxHQUFOLENBQVUsYUFBVjtXQUNBLEtBQUssQ0FBQyxJQUFOLENBQUE7RUFOaUI7O0VBT25CLFFBQVUsQ0FBQyxFQUFELENBQUE7QUFDUixRQUFBO0lBQUEsS0FBQSxHQUFRLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixDQUFnQixFQUFoQjtJQUNSLElBQUcsS0FBQSxLQUFTLE1BQVo7QUFDRSxhQUFPLElBQUksSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFoQixDQUNMO1FBQUEsRUFBQSxFQUFJO01BQUosQ0FESyxFQURUO0tBQUEsTUFBQTtBQUlFLGFBQU8sTUFKVDs7RUFGUTs7RUFPVixhQUFlLENBQUEsQ0FBQTtXQUNiLElBQUMsQ0FBQSxTQUFELENBQVcsWUFBWDtFQURhOztFQUVmLGtCQUFvQixDQUFBLENBQUE7V0FDbEIsSUFBQyxDQUFBLFNBQUQsQ0FBVyxpQkFBWDtFQURrQjs7QUFqRHRCOztBQW9EQSxNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIkJhY2tib25lID0gcmVxdWlyZSAnYmFja2JvbmUnXG5NYXJpb25ldHRlID0gcmVxdWlyZSAnYmFja2JvbmUubWFyaW9uZXR0ZSdcblxuY2xhc3MgRGJDb2xsZWN0aW9uIGV4dGVuZHMgTWFyaW9uZXR0ZS5PYmplY3RcbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgY29sbGVjdGlvbkNsYXNzID0gb3B0aW9ucy5jb2xsZWN0aW9uQ2xhc3Mgb3IgQmFja2JvbmUuQ29sbGVjdGlvblxuICAgIEBjb2xsZWN0aW9uID0gbmV3IGNvbGxlY3Rpb25DbGFzc1xuICAgIEBjaGFubmVsTmFtZSA9IG9wdGlvbnMuY2hhbm5lbE5hbWUgb3IgJ2dsb2JhbCdcbiAgcmFkaW9SZXF1ZXN0czogLT5cbiAgICBvYmogPSB7fVxuICAgIG5hbWUgPSBAZ2V0T3B0aW9uICdtb2RlbE5hbWUnXG4gICAgbmFtZSA9IG5hbWUgb3IgJ21vZGVsJ1xuICAgIHByZWZpeCA9IFwiZGI6I3tuYW1lfVwiXG4gICAgb2JqW1wiI3twcmVmaXh9OmNvbGxlY3Rpb25cIl0gPSAnZ2V0Q29sbGVjdGlvbidcbiAgICBvYmpbXCIje3ByZWZpeH06bmV3XCJdID0gJ25ld01vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTphZGRcIl0gPSAnYWRkTW9kZWwnXG4gICAgb2JqW1wiI3twcmVmaXh9OnVwZGF0ZVwiXSA9ICd1cGRhdGVNb2RlbCdcbiAgICBvYmpbXCIje3ByZWZpeH06dXBkYXRlUGFzc2VkXCJdID0gJ3VwZGF0ZVBhc3NlZE1vZGVsJ1xuICAgIG9ialtcIiN7cHJlZml4fTpnZXRcIl0gPSAnZ2V0TW9kZWwnXG4gICAgb2JqW1wiI3twcmVmaXh9Om1vZGVsQ2xhc3NcIl0gPSAnZ2V0TW9kZWxDbGFzcydcbiAgICBvYmpbXCIje3ByZWZpeH06Y29sbGVjdGlvbkNsYXNzXCJdID0gJ2dldENvbGxlY3Rpb25DbGFzcydcbiAgICByZXR1cm4gb2JqXG4gIGdldENvbGxlY3Rpb246IC0+XG4gICAgQGNvbGxlY3Rpb25cbiAgbmV3TW9kZWw6IChhdHRyaWJ1dGVzKSAtPlxuICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIG9yIHt9XG4gICAgbW9kZWxDbGFzcyA9IEBnZXRPcHRpb24gJ21vZGVsQ2xhc3MnXG4gICAgbmV3IG1vZGVsQ2xhc3MgYXR0cmlidXRlc1xuICBhZGRNb2RlbDogKGF0dHJpYnV0ZXMpIC0+XG4gICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgb3Ige31cbiAgICBjaGFubmVsID0gQGdldENoYW5uZWwoKVxuICAgIG5hbWUgPSBAZ2V0T3B0aW9uICdtb2RlbE5hbWUnXG4gICAgbW9kZWwgPSBAY29sbGVjdGlvbi5jcmVhdGUgYXR0cmlidXRlc1xuICAgIG1vZGVsLm9uY2UgJ3N5bmMnLCAtPlxuICAgICAgY2hhbm5lbC50cmlnZ2VyIFwiZGI6I3tuYW1lfTppbnNlcnRlZFwiXG4gICAgQGNvbGxlY3Rpb24uYWRkIG1vZGVsXG4gIHVwZGF0ZVBhc3NlZE1vZGVsOiAobW9kZWwsIG5ld0F0dHJpYnV0ZXMpIC0+XG4gICAgY2hhbm5lbCA9IEBnZXRDaGFubmVsKClcbiAgICBuYW1lID0gQGdldE9wdGlvbiAnbW9kZWxOYW1lJ1xuICAgIG1vZGVsLm9uY2UgJ3N5bmMnLCAtPlxuICAgICAgY2hhbm5lbC50cmlnZ2VyIFwiZGI6I3tuYW1lfTp1cGRhdGVkXCJcbiAgICBtb2RlbC5zZXQgbmV3QXR0cmlidXRlc1xuICAgIG1vZGVsLnNhdmUoKVxuICBnZXRNb2RlbDogKGlkKSAtPlxuICAgIG1vZGVsID0gQGNvbGxlY3Rpb24uZ2V0IGlkXG4gICAgaWYgbW9kZWwgaXMgdW5kZWZpbmVkXG4gICAgICByZXR1cm4gbmV3IEBjb2xsZWN0aW9uLm1vZGVsXG4gICAgICAgIGlkOiBpZFxuICAgIGVsc2VcbiAgICAgIHJldHVybiBtb2RlbFxuICBnZXRNb2RlbENsYXNzOiAtPlxuICAgIEBnZXRPcHRpb24gJ21vZGVsQ2xhc3MnXG4gIGdldENvbGxlY3Rpb25DbGFzczogLT5cbiAgICBAZ2V0T3B0aW9uICdjb2xsZWN0aW9uQ2xhc3MnXG5cbm1vZHVsZS5leHBvcnRzID0gRGJDb2xsZWN0aW9uXG4iXX0=
